services:
  # ===========================
  # ðŸ”¹ MySQL para users-api
  # ===========================
  mysql-users:
    image: mysql:8.0
    container_name: mysql-users
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: usersdb
      MYSQL_USER: user
      MYSQL_PASSWORD: userpass
    ports:
      - "3307:3306"
    volumes:
      - mysql_users_data:/var/lib/mysql
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-proot" ]
      interval: 5s
      timeout: 3s
      retries: 15
    restart: unless-stopped

  # ===========================
  # ðŸ”¹ MySQL para rooms-api
  # ===========================
  mysql-rooms:
    image: mysql:8.0
    container_name: mysql-rooms
    environment:
      MYSQL_ROOT_PASSWORD: rootrooms
      MYSQL_DATABASE: roomsdb
      MYSQL_USER: roomsuser
      MYSQL_PASSWORD: roomspass
    ports:
      - "3308:3306"
    volumes:
      - mysql_rooms_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-prootrooms" ]
      interval: 5s
      timeout: 3s
      retries: 15
    restart: unless-stopped

  # ===========================
  # ðŸ”¹ Base de datos MongoDB (solo para reservations)
  # ===========================
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpass
      MONGO_INITDB_DATABASE: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  # ===========================
  # ðŸ”¹ RabbitMQ para eventos
  # ===========================
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  # ===========================
  # ðŸ”¹ Microservicio Users API
  # ===========================
  users-api:
    build: ./services/users-api
    container_name: users-api
    environment:
      - DB_HOST=mysql-users
      - DB_PORT=3306
      - DB_USER=user
      - DB_PASSWORD=userpass
      - DB_NAME=usersdb
      - JWT_SECRET=supersecreto_cÃ¡mbialo
      - MEMCACHED_HOST=memcached
      - MEMCACHED_PORT=11211
      - MEMCACHED_TTL=600
    depends_on:
      mysql-users:
        condition: service_healthy
    ports:
      - "8080:8080"
    restart: unless-stopped

  # ===========================
  # ðŸ”¹ Microservicio Rooms API (MySQL)
  # ===========================
  rooms-api:
    build:
      context: ./services/rooms-api
      dockerfile: dockerfile
    container_name: rooms-api
    restart: always
    depends_on:
      mysql-rooms:
        condition: service_healthy
    environment:
      - DB_HOST=mysql-rooms
      - DB_PORT=3306
      - DB_USER=roomsuser
      - DB_PASSWORD=roomspass
      - DB_NAME=roomsdb
    ports:
      - "8081:8080"

  # ===========================
  # ðŸ”¹ Microservicio Reservations API (MongoDB + RabbitMQ)
  # ===========================
  reservations-api:
    build:
      context: ./services/reservations-api
      dockerfile: dockerfile
    container_name: reservations-api
    restart: always
    depends_on:
      - mongodb
      - rabbitmq
    environment:
      MONGO_URI: "mongodb://root:rootpass@mongodb:27017/reservationsdb?authSource=admin"
      MONGO_DB_NAME: reservationsdb
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
    ports:
      - "8082:8080"

volumes:
  mysql_users_data:
  mysql_rooms_data:
  mongo_data:
  rabbitmq_data:
