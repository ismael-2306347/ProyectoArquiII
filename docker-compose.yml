services:
  mysql:
    image: mysql:8.0
    # environment segÃºn lo que venÃ­s usando:
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: usersdb
      MYSQL_USER: user
      MYSQL_PASSWORD: userpass
    # Si en Windows tenÃ©s otro MySQL ocupando 3306, publicÃ¡ asÃ­:
    ports:
      - "3307:3306" # host:container (dentro de Docker igual serÃ¡ mysql:3306)
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-proot" ]
      interval: 5s
      timeout: 3s
      retries: 15
    restart: unless-stopped

  # ===========================
  # ðŸ”¹ Base de datos MongoDB
  # ===========================
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpass
      MONGO_INITDB_DATABASE: roomsdb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  # ===========================
  # ðŸ”¹ Microservicio Users API
  # ===========================
  users-api:
    build: ./services/users-api
    environment:
      DB_HOST: mysql
      DB_PORT: "3306"
      DB_USER: user
      DB_PASSWORD: userpass
      DB_NAME: usersdb
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8080:8080"
    restart: unless-stopped

  # ===========================
  # ðŸ”¹ Microservicio Rooms API (MongoDB)
  # ===========================
  rooms-api:
    build:
      context: ./services/rooms-api
      dockerfile: dockerfile
    container_name: rooms-api
    restart: always
    depends_on:
      - mongodb
    environment:
      MONGODB_URI: "mongodb://root:rootpass@mongodb:27017/roomsdb?authSource=admin"
      MONGODB_DB: roomsdb
    ports:
      - "8081:8080"
# ===========================
# ðŸ”¹ Microservicio Reservations API
# ===========================

# reservations-api:
  reservations-api:
   build:
     context: ./services/reservations-api
     dockerfile: dockerfile
   container_name: reservations-api
   restart: always
   depends_on:
     - mysql
   environment:
     DB_HOST: mysql
     DB_PORT: 3306
     DB_USER: user
     DB_PASSWORD: userpass
     DB_NAME: usersdb
   ports:
   - "8082:8080"

volumes:
  mysql_data:
  mongo_data:
